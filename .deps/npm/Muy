'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var PropTypes = _interopDefault(require('prop-types'));
var Box = _interopDefault(require('@material-ui/core/Box'));
var makeStyles = _interopDefault(require('@material-ui/core/styles/makeStyles'));
var Button = _interopDefault(require('@material-ui/core/Button'));
var Link = _interopDefault(require('@material-ui/core/Link'));
var TextField = _interopDefault(require('@material-ui/core/TextField'));
var gatsby = require('gatsby');
var Typography = _interopDefault(require('@material-ui/core/Typography'));
var List = _interopDefault(require('@material-ui/core/List'));
var ListItem = _interopDefault(require('@material-ui/core/ListItem'));
var ListItemText = _interopDefault(require('@material-ui/core/ListItemText'));
var Divider = _interopDefault(require('@material-ui/core/Divider'));
var createMuiTheme = _interopDefault(require('@material-ui/core/styles/createMuiTheme'));
var Table = _interopDefault(require('@material-ui/core/Table'));
var TableCell = _interopDefault(require('@material-ui/core/TableCell'));
var TableRow = _interopDefault(require('@material-ui/core/TableRow'));

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

/**
 * Muy Article component
 *
 * @param display
 * @param props
 * @return {*}
 * @constructor
 */

var Article = function Article(_ref) {
  var display = _ref.display,
      props = _objectWithoutProperties(_ref, ["display"]);

  return (/*#__PURE__*/React.createElement(Box, _extends({
      component: "article",
      display: display
    }, props))
  );
};
Article.defaultProps = {
  display: "block"
};
Article.propTypes = {
  display: PropTypes.oneOfType([PropTypes.object, PropTypes.oneOf(["block", "inline"])])
};

var AnswerWithText = function AnswerWithText(_ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, ["children"]);

  return (/*#__PURE__*/React.createElement(Box, _extends({
      component: "dd",
      itemScope: true,
      itemProp: "acceptedAnswer",
      itemType: "https://schema.org/Answer"
    }, props), /*#__PURE__*/React.createElement(Box, {
      itemProp: "text"
    }, children))
  );
};

function toVal(mix) {
	var k, y, str='';
	if (mix) {
		if (typeof mix === 'object') {
			if (Array.isArray(mix)) {
				for (k=0; k < mix.length; k++) {
					if (mix[k] && (y = toVal(mix[k]))) {
						str && (str += ' ');
						str += y;
					}
				}
			} else {
				for (k in mix) {
					if (mix[k] && (y = toVal(k))) {
						str && (str += ' ');
						str += y;
					}
				}
			}
		} else if (typeof mix !== 'boolean' && !mix.call) {
			str && (str += ' ');
			str += mix;
		}
	}
	return str;
}

function clsx () {
	var i=0, x, str='';
	while (i < arguments.length) {
		if (x = toVal(arguments[i++])) {
			str && (str += ' ');
			str += x;
		}
	}
	return str;
}

var Video = function Video(_ref) {
  var autoPlay = _ref.autoPlay,
      classes = _ref.classes,
      className = _ref.className,
      display = _ref.display,
      loop = _ref.loop,
      muted = _ref.muted,
      props = _objectWithoutProperties(_ref, ["autoPlay", "classes", "className", "display", "loop", "muted"]);

  return (/*#__PURE__*/React.createElement(Box, _extends({
      autoPlay: autoPlay,
      className: clsx(classes, className),
      component: "video",
      display: display,
      loop: loop,
      muted: muted
    }, props))
  );
};
Video.defaultProps = {
  display: "inline-block"
};

var useStyles = makeStyles({
  root: {
    transform: "translate(-50%, -50%)",
    "@media screen and (max-aspect-ratio: 1920/1080)": {
      height: "100%"
    },
    "@media screen and (min-aspect-ratio: 1920/1080)": {
      width: "100%"
    }
  }
});

var BackgroundVideo = function BackgroundVideo(props) {
  var classes = useStyles();
  return (/*#__PURE__*/React.createElement(Box, {
      className: "MuyBackgroundVideoContainer",
      height: "100vh",
      left: 0,
      overflow: "hidden",
      position: "fixed",
      top: 0,
      width: "100vw",
      zIndex: -1
    }, /*#__PURE__*/React.createElement(Video, _extends({
      autoPlay: true // bottom={0}
      ,
      className: classes.root,
      display: "block",
      left: "50%",
      loop: true // margin={"auto"}
      ,
      minHeight: "50%",
      minWidth: "50%",
      muted: true,
      overflow: "hidden",
      position: "absolute" // right={0}
      ,
      top: "50%",
      zIndex: 1
    }, props)))
  );
};

var handleClick = function handleClick(event) {
  event.preventDefault();
  return window.scrollTo(0, 0);
};

var BackToTopButton = function BackToTopButton(_ref) {
  var title = _ref.title,
      props = _objectWithoutProperties(_ref, ["title"]);

  return (/*#__PURE__*/React.createElement(Button, _extends({
      onClick: handleClick,
      title: title
    }, props))
  );
};

var BackToTopLink = function BackToTopLink(_ref) {
  var title = _ref.title,
      props = _objectWithoutProperties(_ref, ["title"]);

  return (/*#__PURE__*/React.createElement(Link, _extends({
      onClick: handleClick,
      title: title
    }, props))
  );
};

var getDateByAge = function getDateByAge(age) {
  var date = new Date(Date.now());
  var year = date.getFullYear() - age;
  var month = "0".concat(date.getUTCMonth()).slice(-2);
  var day = "0".concat(date.getDate()).slice(-2);
  return "".concat(year, "-").concat(month, "-").concat(day);
};

var BirthdayInput = function BirthdayInput(_ref) {
  var maxAge = _ref.maxAge,
      minAge = _ref.minAge,
      props = _objectWithoutProperties(_ref, ["maxAge", "minAge"]);

  return (/*#__PURE__*/React.createElement(TextField, _extends({
      inputProps: {
        max: maxAge && getDateByAge(maxAge),
        min: minAge && getDateByAge(minAge)
      },
      type: "date"
    }, props))
  );
};
BirthdayInput.propTypes = {
  maxAge: PropTypes.number,
  minAge: PropTypes.number
};

var useStyles$1 = makeStyles(function (theme) {
  return {
    root: {
      "& *:last-child": {
        marginBottom: 0
      }
    }
  };
});

var Blockquote = function Blockquote(props) {
  var classes = useStyles$1();
  return (/*#__PURE__*/React.createElement(Box, _extends({
      className: classes.root,
      component: "blockquote",
      mb: 3,
      mr: 3,
      mt: 0,
      p: 0
    }, props))
  );
};

var variantTypes = ["filled", "outlined", "standard"];
var propTypes = {
  autoCapitalize: PropTypes.oneOf(["characters", "none", "off", "on", "sentences", "words"]),
  autoComplete: PropTypes.oneOf(["given-name", "honorific-prefix", "name", "off", "on"]),
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  id: PropTypes.string,
  inputMode: PropTypes.oneOf([
  /**
   * Fractional numeric input keyboard.
   *
   * Contain the digits and decimal separator for the user's locale
   */
  "decimal",
  /**
   * A virtual keyboard optimized for entering email addresses.
   */
  "email",
  /**
   * Latin input in the user's secondary language(s), using full-width chars
   *
   * Intended for latin text embedded inside Chinese, Japanese & Korean text.
   */
  "full-width-latin",
  /**
   * Kana or romaji input, typically hiragana input, using full-width chars
   */
  "kana",
  /**
   * Same as `kana` with typing aids intended for entering human names enabled
   */
  "kana-name",
  /**
   * Katakana input, using full-width characters, intended for Japanese input
   */
  "katakana",
  /**
   * Latin input with some typing aids enabled (e.g. text prediction).
   */
  "latin",
  /**
   * Latin input with typing aids intended for entering human names enabled
   */
  "latin-name",
  /**
   * Latin input aggressive typing aids intended for communications enabled
   *
   * Intended for situations such as e-mails and instant messaging.
   */
  "latin-prose",
  /**
   * No virtual keyboard
   *
   * For when the page implements its own keyboard input control.
   */
  "none",
  /**
   * Numeric input, including keys for digits, minus and thousands separator
   */
  "numeric",
  /**
   * A virtual keyboard optimized for search input.
   */
  "search",
  /**
   * A telephone keypad input.
   *
   * Includes the digits 0–9, the asterisk (*), and the pound (#) key.
   */
  "tel",
  /**
   * Standard input keyboard for the user's current locale.
   */
  "text",
  /**
   * A keypad optimized for entering URLs.
   *
   * This may have the / key more prominent, for example.
   */
  "url",
  /**
   * Default. Alphanumeric Latin-script input of non-prose content.
   *
   * E.g.: usernames, passwords, product codes, car plate identification
   */
  "verbatim"]),
  inputProps: PropTypes.object,
  name: PropTypes.string,
  placeholder: PropTypes.string,
  required: PropTypes.bool,
  variant: PropTypes.oneOf(variantTypes)
};

var useStyles$2 = makeStyles({
  input: {
    textTransform: "uppercase"
  }
});

var CarPlateField = function CarPlateField(_ref) {
  var autoCapitalize = _ref.autoCapitalize,
      id = _ref.id,
      inputMode = _ref.inputMode,
      inputProps = _ref.inputProps,
      maxLength = _ref.maxLength,
      minLength = _ref.minLength,
      name = _ref.name,
      pattern = _ref.pattern,
      required = _ref.required,
      props = _objectWithoutProperties(_ref, ["autoCapitalize", "id", "inputMode", "inputProps", "maxLength", "minLength", "name", "pattern", "required"]);

  var classes = useStyles$2();
  return (/*#__PURE__*/React.createElement(TextField, _extends({
      autoComplete: true,
      id: id,
      inputProps: _objectSpread2({
        autoCapitalize: autoCapitalize,
        "aria-required": required,
        "data-name": name,
        inputMode: inputMode,
        maxLength: maxLength,
        minLength: minLength,
        pattern: pattern
      }, inputProps),
      InputProps: {
        classes: classes
      },
      name: name,
      required: required
    }, props))
  );
};
CarPlateField.defaultProps = {
  autoCapitalize: "characters",
  autoComplete: "off",
  autoCorrect: "off",
  id: "carPlate",
  inputMode: "verbatim",
  maxLength: 7,
  minLength: 7,
  name: "carPlate",
  pattern: "[a-zA-Z]{3}[0-9]([a-zA-Z]|[0-9])[0-9]{2}"
};
CarPlateField.propTypes = {
  autoCapitalize: propTypes.autoCapitalize,
  autoComplete: propTypes.autoComplete,
  id: propTypes.id,
  inputMode: propTypes.inputMode,
  inputProps: propTypes.inputProps,
  name: propTypes.name,
  required: propTypes.required
};

var Canvas = function Canvas(_ref) {
  var display = _ref.display,
      props = _objectWithoutProperties(_ref, ["display"]);

  return (/*#__PURE__*/React.createElement(Box, _extends({
      component: "canvas",
      display: display
    }, props))
  );
};
Canvas.defaultProps = {
  display: "inline-block"
};

var CityField = function CityField(_ref) {
  var autoCapitalize = _ref.autoCapitalize,
      autoComplete = _ref.autoComplete,
      autoCorrect = _ref.autoCorrect,
      id = _ref.id,
      inputMode = _ref.inputMode,
      inputProps = _ref.inputProps,
      label = _ref.label,
      minLength = _ref.minLength,
      name = _ref.name,
      required = _ref.required,
      props = _objectWithoutProperties(_ref, ["autoCapitalize", "autoComplete", "autoCorrect", "id", "inputMode", "inputProps", "label", "minLength", "name", "required"]);

  return (/*#__PURE__*/React.createElement(TextField, _extends({
      autoComplete: autoComplete,
      label: label,
      id: id,
      inputProps: _objectSpread2({
        autoCapitalize: autoCapitalize,
        autoCorrect: autoCorrect,
        "data-name": name,
        inputMode: inputMode,
        minLength: minLength,
        size: 50,
        tabIndex: 0
      }, inputProps),
      name: name,
      required: required
    }, props))
  );
};
CityField.defaultProps = {
  autoCapitalize: "words",
  autoComplete: "address-level-2",
  autoCorrect: "off",
  id: "city",
  inputMode: "latin",
  inputProps: {},
  minLength: 3,
  name: "city"
};
CityField.propTypes = {
  autoCapitalize: propTypes.autoCapitalize,
  autoComplete: PropTypes.string,
  autoCorrect: PropTypes.string,
  id: PropTypes.string,
  inputMode: PropTypes.string,
  inputProps: PropTypes.object,
  label: PropTypes.string,
  minLength: PropTypes.number,
  name: PropTypes.string,
  required: PropTypes.bool
};

var DateField = function DateField(_ref) {
  var id = _ref.id,
      inputProps = _ref.inputProps,
      InputLabelProps = _ref.InputLabelProps,
      label = _ref.label,
      max = _ref.max,
      min = _ref.min,
      name = _ref.name,
      placeholder = _ref.placeholder,
      required = _ref.required,
      variant = _ref.variant;

  if (variant && !variantTypes.includes(variant)) {
    throw new Error("Invalid variant prop value. Please provide one of these values: ".concat(variantTypes.join(", ")));
  }

  return (/*#__PURE__*/React.createElement(TextField, {
      id: id,
      label: label,
      InputLabelProps: _objectSpread2({
        shrink: true
      }, InputLabelProps),
      inputProps: _objectSpread2({
        "aria-required": required,
        autoCapitalize: "none",
        autoCorrect: "off",
        "data-name": name,
        max: max,
        min: min,
        size: 10
      }, inputProps),
      name: name,
      placeholder: placeholder,
      required: required,
      type: "date",
      variant: variant
    })
  );
};
DateField.defaultProps = {
  id: "date",
  name: "date",
  variant: "standard"
};
DateField.propTypes = {
  id: propTypes.id,
  InputLabelProps: PropTypes.object,
  inputProps: PropTypes.object,
  label: propTypes.label,
  max: PropTypes.string,
  min: PropTypes.string,
  name: propTypes.name,
  placeholder: propTypes.placeholder,
  required: propTypes.required,
  variant: propTypes.variant
};

var EmailField = function EmailField(_ref) {
  var autoCapitalize = _ref.autoCapitalize,
      autoComplete = _ref.autoComplete,
      autoCorrect = _ref.autoCorrect,
      id = _ref.id,
      inputMode = _ref.inputMode,
      inputProps = _ref.inputProps,
      maxLength = _ref.maxLength,
      minLength = _ref.minLength,
      multiple = _ref.multiple,
      name = _ref.name,
      required = _ref.required,
      props = _objectWithoutProperties(_ref, ["autoCapitalize", "autoComplete", "autoCorrect", "id", "inputMode", "inputProps", "maxLength", "minLength", "multiple", "name", "required"]);

  return (/*#__PURE__*/React.createElement(TextField, _extends({
      "aria-required": required,
      autoComplete: autoComplete,
      id: id,
      inputProps: _objectSpread2({
        "aria-required": required,
        autoCapitalize: autoCapitalize,
        autoCorrect: autoCorrect,
        "data-name": name,
        inputMode: inputMode,
        maxLength: maxLength,
        minLength: minLength,
        multiple: multiple,
        size: 50,
        tabIndex: 0
      }, inputProps),
      name: name,
      required: required,
      type: "email"
    }, props))
  );
};
EmailField.defaultProps = {
  autoCapitalize: "none",
  autoComplete: "email",
  autoCorrect: "off",
  id: "email",
  inputMode: "email",
  inputProps: {},
  maxLength: 254,
  minLength: 3,
  multiple: false,
  name: "email"
};
EmailField.propTypes = {
  autoCapitalize: PropTypes.string,
  autoComplete: PropTypes.string,
  autoCorrect: PropTypes.string,
  id: PropTypes.string,
  maxLength: PropTypes.number,
  multiple: PropTypes.bool,
  name: PropTypes.string,
  required: PropTypes.bool
};

var baseTypography = {
  body2: {
    "-moz-font-feature-settings": '"kern", "liga", "clig", "calt"',
    "-ms-font-feature-settings": '"kern", "liga", "clig", "calt"',
    "-webkit-font-feature-settings": '"kern", "liga", "clig", "calt"',
    fontFeatureSettings: '"kern", "liga", "clig", "calt"',
    fontKerning: "normal",
    fontWeight: "normal",
    wordWrap: "break-word"
  },
  fontWeightBold: "bold"
};
var objectFitCover = {
  height: "100%",
  objectFit: "cover",
  objectPosition: "50% 50%",
  width: "100%"
};

var imageStyle = function imageStyle(theme) {
  return {
    root: {
      height: "auto",
      margin: "0 0 ".concat(theme.spacing(3), "px"),
      maxWidth: "100%",
      padding: 0
    },
    cover: objectFitCover
  };
};

var useStyles$3 = makeStyles(function (theme) {
  return {
    cover: objectFitCover
  };
});

var Iframe = function Iframe(_ref) {
  var title = _ref.title,
      variant = _ref.variant,
      props = _objectWithoutProperties(_ref, ["title", "variant"]);

  var classes = useStyles$3();
  return (/*#__PURE__*/React.createElement(Box, _extends({
      border: 0,
      className: variant === "cover" && classes.cover,
      component: "iframe",
      display: "inline",
      frameBorder: 0,
      mb: 0,
      mr: 0,
      mt: 0,
      p: 0,
      title: title
    }, props))
  );
};

var EmbedGoogleMap = function EmbedGoogleMap(_ref) {
  var apiKey = _ref.apiKey,
      coordinates = _ref.coordinates,
      props = _objectWithoutProperties(_ref, ["apiKey", "coordinates"]);

  return (/*#__PURE__*/React.createElement(Iframe, _extends({
      allowFullScreen: true,
      src: "https://www.google.com/maps/embed/v1/place?q=".concat(coordinates, "&key=").concat(apiKey)
    }, props))
  );
};

var useStyles$4 = makeStyles(function (theme) {
  return {
    borderNone: {
      borderStyle: "none",
      borderWidth: 0
    },
    borderSolid: {
      borderColor: theme.palette.divider,
      borderStyle: "solid"
    },
    root: {
      marginInlineStart: 0,
      marginInlineEnd: 0,
      paddingBlockStart: 0,
      paddingBlockEnd: 0,
      paddingInlineStart: 0,
      paddingInlineEnd: 0
    }
  };
});

var PureFieldset = function PureFieldset(_ref, ref) {
  var className = _ref.className,
      variant = _ref.variant,
      props = _objectWithoutProperties(_ref, ["className", "variant"]);

  var classes = useStyles$4();
  return (/*#__PURE__*/React.createElement(Box, _extends({
      border: variant === "borderSolid" ? 1 : 0,
      className: clsx(className, classes.root, variant === "borderNone" && classes.borderNone, variant === "borderSolid" && classes.borderSolid),
      component: "fieldset",
      mb: 3,
      mr: 0,
      mt: 0,
      pb: variant === "borderNone" ? 0 : 1.25,
      pr: variant === "borderNone" ? 0 : 1,
      pt: variant === "borderNone" ? 0 : 0.5,
      ref: ref
    }, props))
  );
};

var Fieldset = React.forwardRef(PureFieldset);
Fieldset.defaultProps = {
  variant: null
};
Fieldset.propTypes = {
  variant: PropTypes.string
};

var Figure = function Figure(props) {
  return (/*#__PURE__*/React.createElement(Box, _extends({
      component: "figure",
      display: "block",
      mb: 3,
      ml: 5,
      mr: 5,
      mt: 1.75,
      p: 0
    }, props))
  );
};

var PureFileInput = function PureFileInput(_ref, ref) {
  var accept = _ref.accept,
      id = _ref.id,
      name = _ref.name,
      props = _objectWithoutProperties(_ref, ["accept", "id", "name"]);

  return (/*#__PURE__*/React.createElement("input", _extends({
      accept: accept,
      id: id,
      name: name,
      ref: ref,
      type: "file"
    }, props))
  );
};

var FileInput = React.forwardRef(PureFileInput);
FileInput.defaultProps = {
  id: "file",
  name: "file"
};
FileInput.propTypes = {
  accept: PropTypes.string,
  id: PropTypes.string,
  name: PropTypes.string
};

var FigureCaption = function FigureCaption(_ref) {
  var display = _ref.display,
      props = _objectWithoutProperties(_ref, ["display"]);

  return (/*#__PURE__*/React.createElement(Box, _extends({
      component: "figcaption",
      display: display
    }, props))
  );
};
FigureCaption.defaultProps = {
  display: "block"
};

var Footer = function Footer(_ref) {
  var _ref$display = _ref.display,
      display = _ref$display === void 0 ? "block" : _ref$display,
      props = _objectWithoutProperties(_ref, ["display"]);

  return (/*#__PURE__*/React.createElement(Box, _extends({
      component: "footer",
      display: display
    }, props))
  );
};

var PureForm = function PureForm(_ref, ref) {
  var display = _ref.display,
      id = _ref.id,
      name = _ref.name,
      props = _objectWithoutProperties(_ref, ["display", "id", "name"]);

  return (/*#__PURE__*/React.createElement(Box, _extends({
      component: "form",
      "data-name": name,
      display: display,
      mb: 3,
      mr: 0,
      mt: 0,
      id: id,
      name: name,
      p: 0,
      ref: ref
    }, props))
  );
};

var Form = React.forwardRef(PureForm);
Form.defaultProps = {
  display: "block",
  id: "form",
  name: "form"
};
Form.propTypes = {
  display: PropTypes.string,
  name: PropTypes.string
};

var GatsbyLink = function GatsbyLink(_ref) {
  var color = _ref.color,
      rel = _ref.rel,
      target = _ref.target,
      to = _ref.to,
      underline = _ref.underline,
      props = _objectWithoutProperties(_ref, ["color", "rel", "target", "to", "underline"]);

  return (/*#__PURE__*/React.createElement(Link, _extends({
      color: color,
      component: React.forwardRef(function (props, ref) {
        return (/*#__PURE__*/React.createElement(gatsby.Link, props)
        );
      }),
      rel: target === "_blank" ? "noopener noreferer ".concat(rel) : rel,
      target: target,
      to: to,
      underline: underline
    }, props))
  );
};
GatsbyLink.defaultProps = {
  target: "_self"
};

var propTypes$1 = {
  children: PropTypes.node.isRequired,
  variant: PropTypes.string
};

var GatsbyLinkButton = function GatsbyLinkButton(_ref) {
  var children = _ref.children,
      to = _ref.to,
      variant = _ref.variant,
      props = _objectWithoutProperties(_ref, ["children", "to", "variant"]);

  return (/*#__PURE__*/React.createElement(Button, _extends({
      component: GatsbyLink,
      to: to,
      underline: "none",
      variant: variant
    }, props), children)
  );
};
GatsbyLinkButton.propTypes = propTypes$1;

var PureHeader = function PureHeader(props, ref) {
  return (/*#__PURE__*/React.createElement(Box, _extends({
      component: "header",
      display: "block",
      ref: ref
    }, props))
  );
};

var Header = React.forwardRef(PureHeader);

var getHnDefaultProps = function getHnDefaultProps(level) {
  return {
    gutterBottom: false,
    variant: "h".concat(level)
  };
};

var Heading = function Heading(_ref) {
  var level = _ref.level,
      variant = _ref.variant,
      props = _objectWithoutProperties(_ref, ["level", "variant"]);

  return (/*#__PURE__*/React.createElement(Typography, _extends({
      component: "h".concat(level),
      variant: variant ? variant : getHnDefaultProps(level).variant
    }, props))
  );
};

var basePropTypes = {
  gutterBottom: PropTypes.bool,
  variant: PropTypes.string
};
Heading.propTypes = _objectSpread2({
  level: PropTypes.oneOf([1, 2, 3, 4, 5, 6])
}, basePropTypes);
Heading.defaultProps = {
  level: 1
};
var H1 = function H1(_ref2) {
  var variant = _ref2.variant,
      props = _objectWithoutProperties(_ref2, ["variant"]);

  return (/*#__PURE__*/React.createElement(Heading, _extends({
      level: 1,
      variant: variant
    }, props))
  );
};
var H2 = function H2(_ref3) {
  var variant = _ref3.variant,
      props = _objectWithoutProperties(_ref3, ["variant"]);

  return (/*#__PURE__*/React.createElement(Heading, _extends({
      level: 2,
      variant: variant
    }, props))
  );
};
var H3 = function H3(_ref4) {
  var variant = _ref4.variant,
      props = _objectWithoutProperties(_ref4, ["variant"]);

  return (/*#__PURE__*/React.createElement(Heading, _extends({
      level: 3,
      variant: variant
    }, props))
  );
};
var H4 = function H4(_ref5) {
  var variant = _ref5.variant,
      props = _objectWithoutProperties(_ref5, ["variant"]);

  return (/*#__PURE__*/React.createElement(Heading, _extends({
      level: 4,
      variant: variant
    }, props))
  );
};
var H5 = function H5(_ref6) {
  var variant = _ref6.variant,
      props = _objectWithoutProperties(_ref6, ["variant"]);

  return (/*#__PURE__*/React.createElement(Heading, _extends({
      level: 5,
      variant: variant
    }, props))
  );
};
var H6 = function H6(_ref7) {
  var variant = _ref7.variant,
      props = _objectWithoutProperties(_ref7, ["variant"]);

  return (/*#__PURE__*/React.createElement(Heading, _extends({
      level: 6,
      variant: variant
    }, props))
  );
};
H1.propTypes = basePropTypes;
H1.defaultProps = getHnDefaultProps(1);
H2.propTypes = basePropTypes;
H2.defaultProps = getHnDefaultProps(2);
H3.propTypes = basePropTypes;
H3.defaultProps = getHnDefaultProps(3);
H4.propTypes = basePropTypes;
H4.defaultProps = getHnDefaultProps(4);
H5.propTypes = basePropTypes;
H5.defaultProps = getHnDefaultProps(5);
H6.propTypes = basePropTypes;
H6.defaultProps = getHnDefaultProps(6);

var useStyles$5 = makeStyles({
  root: {
    "& li": {
      justifyContent: "space-around"
    }
  }
});

var HorizontalList = function HorizontalList(props) {
  var classes = useStyles$5();
  return (/*#__PURE__*/React.createElement(Box, _extends({
      classes: classes,
      component: List,
      disablePadding: true,
      display: "flex",
      flexDirection: "row"
    }, props))
  );
};

var useStyles$6 = makeStyles(imageStyle);

var Image = function Image(_ref) {
  var alt = _ref.alt,
      height = _ref.height,
      title = _ref.title,
      variant = _ref.variant,
      width = _ref.width,
      props = _objectWithoutProperties(_ref, ["alt", "height", "title", "variant", "width"]);

  var classes = useStyles$6();
  return (/*#__PURE__*/React.createElement("img", _extends({
      alt: alt,
      className: clsx(classes.root, variant === "cover" && classes.cover),
      height: height,
      title: title,
      width: width
    }, props))
  );
};

var useStyles$7 = makeStyles({
  root: {
    paddingInlineStart: 0,
    paddingInlineEnd: 0
  }
});

var Legend = function Legend(props) {
  var classes = useStyles$7();
  return (/*#__PURE__*/React.createElement(Box, _extends({
      boxSizing: "border-box",
      className: classes.root,
      color: "inherit",
      component: "legend",
      display: "table",
      maxWidth: "100%",
      p: 0,
      whiteSpace: "normal"
    }, props))
  );
};

var ListItemWithText = function ListItemWithText(props) {
  return (/*#__PURE__*/React.createElement(ListItem, null, /*#__PURE__*/React.createElement(ListItemText, props))
  );
};

var useStyles$8 = makeStyles({
  root: {
    outlineColor: "transparent",
    outlineStyle: "none",
    outlineWidth: 0
  }
});

var MainContent = function MainContent(_ref) {
  var id = _ref.id,
      mt = _ref.mt,
      props = _objectWithoutProperties(_ref, ["id", "mt"]);

  var classes = useStyles$8();
  return (/*#__PURE__*/React.createElement(Box, _extends({
      className: classes.root,
      id: id,
      component: "main",
      display: "block",
      mt: mt,
      role: "main",
      tabIndex: -1
    }, props))
  );
};
MainContent.defaultProps = {
  id: "content",
  mt: 3
};
MainContent.propTypes = {
  id: PropTypes.string,
  mt: PropTypes.number
};

var NameField = function NameField(_ref) {
  var autoCapitalize = _ref.autoCapitalize,
      autoComplete = _ref.autoComplete,
      autoCorrect = _ref.autoCorrect,
      id = _ref.id,
      inputMode = _ref.inputMode,
      inputProps = _ref.inputProps,
      maxLength = _ref.maxLength,
      minLength = _ref.minLength,
      name = _ref.name,
      required = _ref.required,
      props = _objectWithoutProperties(_ref, ["autoCapitalize", "autoComplete", "autoCorrect", "id", "inputMode", "inputProps", "maxLength", "minLength", "name", "required"]);

  return (/*#__PURE__*/React.createElement(TextField, _extends({
      autoComplete: autoComplete,
      id: id,
      name: name,
      inputProps: _objectSpread2({
        "aria-required": required,
        autoCapitalize: autoCapitalize,
        autoCorrect: autoCorrect,
        "data-name": name,
        inputMode: inputMode,
        maxLength: maxLength,
        minLength: minLength,
        size: 50,
        tabIndex: 0
      }, inputProps),
      required: required,
      type: "text"
    }, props))
  );
};
NameField.defaultProps = {
  autoCapitalize: "words",
  autoComplete: "name",
  autoCorrect: "off",
  id: "name",
  inputMode: "latin-name",
  maxLength: 50,
  minLength: 5,
  name: "name"
};
NameField.propTypes = {
  autoCapitalize: PropTypes.oneOf(["none", "characters", "off", "on", "sentences", "words"]),
  autoComplete: PropTypes.string,
  autoCorrect: PropTypes.oneOf(["off", "on"]),
  id: PropTypes.string,
  inputMode: PropTypes.string,
  inputProps: PropTypes.object,
  maxLength: PropTypes.number,
  minLength: PropTypes.number,
  name: PropTypes.string,
  required: PropTypes.bool
};

var Nav = function Nav(_ref) {
  var display = _ref.display,
      props = _objectWithoutProperties(_ref, ["display"]);

  return (/*#__PURE__*/React.createElement(Box, _extends({
      component: "nav",
      display: display,
      role: "navigation"
    }, props))
  );
};
Nav.defaultProps = {
  display: "block"
};

var NetlifyForm = function NetlifyForm(_ref) {
  var action = _ref.action,
      children = _ref.children,
      formName = _ref.formName,
      honeypot = _ref.honeypot,
      id = _ref.id,
      method = _ref.method,
      name = _ref.name,
      props = _objectWithoutProperties(_ref, ["action", "children", "formName", "honeypot", "id", "method", "name"]);

  var honeyPotName = id ? "".concat(id, "-bot-field") : "bot-field";
  return (/*#__PURE__*/React.createElement(Form, _extends({
      action: action,
      "data-netlify": "true",
      "data-netlify-honeypot": honeypot && honeyPotName,
      id: id,
      method: method,
      name: name
    }, props), honeyPotName && /*#__PURE__*/React.createElement("input", {
      "aria-hidden": true,
      id: honeyPotName,
      name: honeyPotName,
      type: "hidden",
      value: ""
    }), /*#__PURE__*/React.createElement("input", {
      "aria-hidden": true,
      id: "form-name",
      name: "form-name",
      type: "hidden",
      value: formName
    }), children)
  );
};
NetlifyForm.defaultProps = {
  formName: "Contact form",
  honeypot: true,
  id: "contact",
  method: "POST",
  name: "contact"
};
NetlifyForm.propTypes = {
  action: PropTypes.string,
  formName: PropTypes.string,
  honeypot: PropTypes.bool,
  id: PropTypes.string,
  method: PropTypes.oneOf(["get", "GET", "post", "POST"]),
  name: PropTypes.string
};

var PageFooter = function PageFooter(props) {
  return (/*#__PURE__*/React.createElement(Footer, _extends({
      itemScope: true,
      itemType: "https://schema.org/WPFooter",
      role: "contentinfo"
    }, props))
  );
};

var PurePageHeader = function PurePageHeader(props, ref) {
  return (/*#__PURE__*/React.createElement(Header, _extends({
      itemScope: true,
      itemType: "https://schema.org/WPHeader",
      ref: ref,
      role: "banner"
    }, props))
  );
};

var PageHeader = React.forwardRef(PurePageHeader);

var Paragraph = function Paragraph(props) {
  return (/*#__PURE__*/React.createElement(Typography, _extends({
      paragraph: true
    }, props))
  );
};

var PhotoUploadField = function PhotoUploadField(_ref) {
  var capture = _ref.capture,
      props = _objectWithoutProperties(_ref, ["capture"]);

  return (/*#__PURE__*/React.createElement(FileInput, _extends({
      accept: "image/*",
      capture: capture
    }, props))
  );
};
PhotoUploadField.defaultProps = {
  capture: "environment"
};
PhotoUploadField.propTypes = {
  capture: PropTypes.oneOf(["environment", "user"])
};

var QuestionText = function QuestionText(props) {
  return (/*#__PURE__*/React.createElement(Box, _extends({
      component: "dt"
    }, props))
  );
};

var Question = function Question(_ref) {
  var children = _ref.children,
      question = _ref.question,
      AnswerProps = _ref.AnswerProps,
      QuestionProps = _ref.QuestionProps,
      props = _objectWithoutProperties(_ref, ["children", "question", "AnswerProps", "QuestionProps"]);

  return (/*#__PURE__*/React.createElement(Box, _extends({
      itemScope: true,
      itemProp: "mainEntity",
      itemType: "https://schema.org/Question"
    }, props), /*#__PURE__*/React.createElement(QuestionText, QuestionProps, question), /*#__PURE__*/React.createElement(AnswerWithText, AnswerProps, children), /*#__PURE__*/React.createElement(Divider, null))
  );
};

var SkipToContentLink = function SkipToContentLink(_ref) {
  var children = _ref.children,
      href = _ref.href,
      props = _objectWithoutProperties(_ref, ["children", "href"]);

  return (/*#__PURE__*/React.createElement(Link, _extends({
      href: href,
      variant: "srOnly"
    }, props), children)
  );
};
SkipToContentLink.defaultProps = {
  children: /*#__PURE__*/React.createElement(React.Fragment, null, "Skip to content"),
  href: "#content"
};
SkipToContentLink.propTypes = {
  children: PropTypes.node.isRequired,
  href: PropTypes.string
};

var SiteNav = function SiteNav(props) {
  return (/*#__PURE__*/React.createElement(Nav, _extends({
      itemScope: true,
      itemType: "https://schema.org/SiteNavigationElement"
    }, props))
  );
};

var PureSiteTitle = function PureSiteTitle(_ref, ref) {
  var color = _ref.color,
      children = _ref.children,
      HeadingProps = _ref.HeadingProps,
      props = _objectWithoutProperties(_ref, ["color", "children", "HeadingProps"]);

  return (/*#__PURE__*/React.createElement(H1, _extends({
      gutterBottom: false,
      variant: "body1"
    }, HeadingProps), /*#__PURE__*/React.createElement(GatsbyLink, _extends({
      color: "inherit",
      ref: ref,
      to: "/",
      underline: "hover"
    }, props), children))
  );
};

var SiteTitle = React.forwardRef(PureSiteTitle);
SiteTitle.defaultProps = {
  color: "inherit"
};

var TelephoneNumberField = function TelephoneNumberField(_ref) {
  var id = _ref.id,
      inputProps = _ref.inputProps,
      maxLength = _ref.maxLength,
      name = _ref.name,
      required = _ref.required,
      props = _objectWithoutProperties(_ref, ["id", "inputProps", "maxLength", "name", "required"]);

  return (/*#__PURE__*/React.createElement(TextField, _extends({
      "aria-required": required,
      id: id,
      inputProps: _objectSpread2({
        "data-name": name,
        maxLength: maxLength
      }, inputProps),
      name: name,
      required: required,
      type: "tel"
    }, props))
  );
};
TelephoneNumberField.defaultProps = {
  id: "tel",
  maxLength: 256,
  name: "tel"
};

var MuiAppBar = {
  root: {
    borderTop: "1px solid transparent"
  }
};

var MuiButton;

MuiButton = function MuiButton(_ref) {
  var palette = _ref.palette,
      spacing = _ref.spacing;
  return {
    root: {
      appearance: "none",
      cursor: "pointer",
      font: "inherit",
      fontWeight: "bold",
      lineHeight: "".concat(spacing(2.5), "px"),
      minHeight: spacing(3),
      overflow: "visible",
      textDecoration: "none",
      '&[type="button"], &[type="reset"], &[type="submit"], html &[type="button"]': {
        "-webkit-appearance": "button",
        "&::-moz-focus-inner": {
          borderStyle: "none",
          padding: 0
        },
        "&::-moz-focusring": {
          outline: "1px dotted ButtonText"
        }
      }
    },
    outlined: {
      backgroundColor: "transparent",
      borderRadius: "".concat(spacing(0.5), "px"),
      borderStyle: "solid",
      borderWidth: "".concat(spacing(0.5), "px")
    },
    outlinedPrimary: {
      borderColor: palette["primary"],
      color: palette["primary"]
    }
  };
};

var MuiButton$1 = MuiButton;

var MuiCheckbox = {
  root: {
    borderSizing: "border-box",
    padding: 0
  }
};

var MuiContainer = function MuiContainer(theme) {
  return {
    root: {
      margin: "0 auto",
      padding: "0 1.0875rem ".concat(theme.spacing(3), "px")
    }
  };
};

var MuiCssBaseline = function MuiCssBaseline(theme) {
  return {
    "@global": {
      "*, ::after, ::before": {
        boxSizing: "border-box"
      },
      "html, body": {
        display: "block",
        margin: 0,
        padding: 0
      },
      html: _defineProperty({
        "-ms-text-size-adjust": "100%;",
        "-webkit-text-size-adjust": "100%",
        boxSizing: "border-box",
        lineHeight: "1.45em",
        overflowY: "scroll"
      }, theme.breakpoints.down("xs"), {
        fontSize: "100%"
      }),
      "::-webkit-input-placeholder": {
        color: "inherit",
        opacity: 0.54
      },
      "::-webkit-file-upload-button": {
        "-webkit-appearance": "button",
        font: "inherit"
      },
      "[hidden], template": {
        display: "none"
      },
      abbr: {
        borderBottom: "none",
        cursor: "help",
        "&[title]": {
          borderBottom: "1px dotted hsla(0, 0%, 0%, 0.5)",
          textDecoration: "none"
        }
      },
      address: {
        margin: "0 0 ".concat(theme.spacing(3), "px"),
        padding: 0
      },
      "code, kbd, pre, samp": {
        fontFamily: '"SFMono-Regular", Consolas, "Roboto Mono", "Droid Sans Mono", "Liberation Mono", Menlo, Courier, monospace',
        fontSize: "1em"
      },
      "code, kbd, samp": {
        fontSize: "0.85rem",
        lineHeight: "".concat(theme.spacing(3), "px")
      },
      code: {
        backgroundColor: theme.palette.background["default"],
        borderRadius: "".concat(theme.spacing(0.5), "px"),
        padding: "0.2em 0",
        "&:before, &:after": {
          content: '" "',
          letterSpacing: "-0.2em"
        },
        "pre &": {
          background: "none",
          lineHeight: 1.42,
          "&:before, &:after": {
            content: '" "'
          }
        }
      },
      dfn: {
        fontSize: "italic"
      },
      dd: {
        margin: "0 0 ".concat(theme.spacing(3), "px"),
        padding: 0
      },
      dl: {
        margin: "0 0 ".concat(theme.spacing(3), "px"),
        padding: 0
      },
      dt: {
        fontWeight: "bold"
      },
      hgroup: {
        margin: "0 0 ".concat(theme.spacing(3), "px"),
        padding: 0
      },
      mark: {
        backgroundColor: theme.palette.warning["light"],
        color: theme.palette.text.primary
      },
      noscript: {
        margin: "0 0 ".concat(theme.spacing(3), "px"),
        padding: 0
      },
      pre: {
        background: theme.palette.background["default"],
        borderRadius: "".concat(theme.spacing(0.5), "px"),
        fontSize: "0.85em",
        lineHeight: 1.42,
        margin: "0 0 ".concat(theme.spacing(3), "px"),
        padding: "".concat(theme.spacing(3), "px"),
        overflow: "auto",
        wordWrap: "normal"
      },
      small: {
        fontSize: "80%"
      },
      "sub, sup": {
        fontSize: "75%",
        lineHeight: 0,
        position: "relative",
        verticalAlign: "baseline"
      },
      sub: {
        bottom: "-0.25em"
      },
      sup: {
        top: "-0.5em"
      },
      "svg:not(:root)": {
        overflow: "hidden"
      },
      '[type="number"]::-webkit-inner-spin-button, [type="number"]::-webkit-outer-spin-button': {
        height: "auto"
      },
      '[type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration': {
        "-webkit-appearance": "none"
      }
    }
  };
};

var MuiDivider = function MuiDivider(theme) {
  return {
    root: {
      border: "none",
      boxSizing: "content-box",
      height: "1px",
      margin: "0 0 calc(".concat(theme.spacing(3), "px - 1px);"),
      overflow: "visible",
      padding: 0
    }
  };
};

var MuiFormGroup = function MuiFormGroup(theme) {
  return {
    row: {
      marginBottom: theme.spacing(2)
    }
  };
};

var MuiInput = function MuiInput(theme) {
  return {
    input: {
      backgroundClip: "padding-box",
      boxSizing: "content-box",
      font: "inherit",
      fontWeight: 400,
      lineHeight: theme.spacing(2.5),
      margin: 0,
      maxWidth: "100%",
      minHeight: theme.spacing(3),
      minWidth: 0,
      overflow: "visible"
    },
    inputTypeSearch: {
      "-webkit-appearance": "textfield",
      outlineOffset: "-2px"
    },
    multiline: {
      font: "inherit",
      margin: 0,
      minHeight: theme.spacing(3),
      overflow: "visible"
    }
  };
};

var MuiLinearProgress = {
  root: {
    display: "inline-block",
    verticalAlign: "baseline"
  }
};

var MuiLink = {
  root: {
    "-webkit-text-decoration-skip": "objects",
    backgroundColor: "transparent",
    textDecorationSkip: "objects",
    textDecorationSkipInk: "auto",
    "&:active, &:hover": {
      outlineWidth: 0
    }
  },
  underlineNone: {
    textDecoration: "none"
  }
};

var MuiList = {
  root: {
    listStyleImage: "none",
    listStylePosition: "outside",
    padding: 0,
    paddingInlineStart: 0
  }
};

var MuiListItem = function MuiListItem(theme) {
  return {
    root: {
      listStyleType: "none",
      paddingLeft: 0,
      "& > ol, & > ul": {
        marginBottom: "".concat(theme.spacing(3), "px"),
        marginLeft: "".concat(theme.spacing(3), "px"),
        marginTop: "".concat(theme.spacing(3), "px")
      },
      "& *:last-child": {
        marginBottom: 0
      },
      "& > p": {
        marginBottom: "".concat(theme.spacing(1.5), "px")
      }
    },
    gutters: {
      marginBottom: "".concat(theme.spacing(1.5), "px")
    }
  };
};

var MuiNativeSelect = {
  root: {
    font: "inherit",
    margin: 0
  }
};

var MuiOutlinedInput = function MuiOutlinedInput(theme) {
  return {
    notchedOutline: {
      borderStyle: "solid",
      borderWidth: theme.spacing(0.25)
    }
  };
};

var MuiRadio = {
  root: {
    borderSizing: "border-box",
    padding: 0
  }
};

var MuiSelect = {
  root: {
    textTransform: "none"
  }
};

var MuiTable = function MuiTable(theme) {
  return {
    root: {
      borderCollapse: "collapse",
      fontSize: "1rem",
      lineHeight: "".concat(theme.spacing(3), "px"),
      margin: "0 0 ".concat(theme.spacing(3), "px"),
      padding: 0,
      width: "100%"
    }
  };
};

var MuiTableCell = {
  root: {
    borderBottom: "1px solid hsla(0, 0%, 0%, 0.12)",
    fontFeatureSettings: '"tnum"',
    "-moz-font-feature-settings": '"tnum"',
    "-ms-font-feature-settings": '"tnum"',
    "-webkit-font-feature-settings": '"tnum"'
  },
  alignLeft: {
    textAlign: "left"
  },
  head: {
    fontWeight: "bold"
  },
  paddingNone: {
    "&:first-child": {
      paddingLeft: 0
    },
    "&:last-child": {
      padding: 0
    }
  }
};

var MuiTableHead = {
  root: {
    textAlign: "left"
  }
};

var MuiToolbar = function MuiToolbar(theme) {
  return {
    root: {
      maxWidth: theme.breakpoints.values.md
    }
  };
};

var MuiTypography = function MuiTypography(_ref) {
  var down = _ref.breakpoints.down,
      spacing = _ref.spacing;
  var headingBase = {
    fontWeight: "bold",
    lineHeight: 1.1,
    textRendering: "optimizeLegibility"
  };
  return {
    root: {
      padding: 0
    },
    gutterBottom: {
      margin: "0 0 ".concat(spacing(3), "px")
    },
    h1: _objectSpread2(_objectSpread2({}, headingBase), {}, {
      fontSize: "2.25rem"
    }),
    h2: _objectSpread2(_objectSpread2({}, headingBase), {}, _defineProperty({
      fontSize: "1.62671rem"
    }, down("sm"), {
      fontSize: "1.38316rem"
    })),
    h3: _objectSpread2(_objectSpread2({}, headingBase), {}, {
      fontSize: "1.38316rem"
    }),
    h4: _objectSpread2(_objectSpread2({}, headingBase), {}, {
      fontSize: "1rem"
    }),
    h5: _objectSpread2(_objectSpread2({}, headingBase), {}, {
      fontSize: "0.85028rem"
    }),
    h6: _objectSpread2(_objectSpread2({}, headingBase), {}, {
      fontSize: "0.78405rem"
    }),
    paragraph: {
      "&:last-child": {
        marginBottom: 0
      }
    },
    srOnly: {
      "-webkit-clip-path": "inset(50%)",
      border: 0,
      clip: "rect(1px, 1px, 1px, 1px)",
      clipPath: "inset(50%)",
      height: "1px",
      left: "-10000px",
      margin: "-1px",
      overflow: "hidden",
      padding: 0,
      position: "absolute",
      top: "auto",
      width: "1px",
      whiteSpace: "nowrap",
      "&:active, &:focus": {
        "-webkit-clip-path": "none",
        clip: "auto",
        clipPath: "none",
        height: "auto",
        left: 0,
        margin: "auto",
        overflow: "visible",
        position: "static",
        width: "auto",
        whiteSpace: "normal"
      }
    }
  };
};

var getThemeOptions = function getThemeOptions() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      baseTheme = _ref.baseTheme;

  return _objectSpread2(_objectSpread2({}, baseTheme), {}, {
    typography: _objectSpread2(_objectSpread2({}, baseTypography), baseTheme.typography),
    overrides: {
      MuiAppBar: MuiAppBar,
      MuiButton: MuiButton$1(baseTheme),
      MuiCheckbox: MuiCheckbox,
      MuiContainer: MuiContainer(baseTheme),
      MuiCssBaseline: MuiCssBaseline(baseTheme),
      MuiDivider: MuiDivider(baseTheme),
      MuiFormGroup: MuiFormGroup(baseTheme),
      MuiLinearProgress: MuiLinearProgress,
      MuiInput: MuiInput(baseTheme),
      MuiLink: MuiLink,
      MuiList: MuiList,
      MuiListItem: MuiListItem(baseTheme),
      MuiNativeSelect: MuiNativeSelect,
      MuiOutlinedInput: MuiOutlinedInput(baseTheme),
      MuiRadio: MuiRadio,
      MuiSelect: MuiSelect,
      MuiTable: MuiTable(baseTheme),
      MuiTableCell: MuiTableCell,
      MuiTableHead: MuiTableHead,
      MuiToolbar: MuiToolbar(baseTheme),
      MuiTypography: MuiTypography(baseTheme)
    }
  });
};

var getTheme = function getTheme(_ref2) {
  var baseTheme = _ref2.baseTheme;
  return createMuiTheme(getThemeOptions(baseTheme));
};

var getNativeFontFamily = function getNativeFontFamily() {
  return ['"-apple-system"', "BlinkMacSystemFont", "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", '"Fira Sans"', '"Droid Sans"', '"Helvetica Neue"', "sans-serif"];
};

var useMDXComponents = function useMDXComponents() {
  return {
    a: Link,
    blockquote: Blockquote,
    h1: function h1(props) {
      return (/*#__PURE__*/React.createElement(H1, _extends({
          gutterBottom: true
        }, props))
      );
    },
    h2: function h2(props) {
      return (/*#__PURE__*/React.createElement(H2, _extends({
          gutterBottom: true
        }, props))
      );
    },
    h3: function h3(props) {
      return (/*#__PURE__*/React.createElement(H3, _extends({
          gutterBottom: true
        }, props))
      );
    },
    h4: function h4(props) {
      return (/*#__PURE__*/React.createElement(H4, _extends({
          gutterBottom: true
        }, props))
      );
    },
    h5: function h5(props) {
      return (/*#__PURE__*/React.createElement(H5, _extends({
          gutterBottom: true
        }, props))
      );
    },
    h6: function h6(props) {
      return (/*#__PURE__*/React.createElement(H6, _extends({
          gutterBottom: true
        }, props))
      );
    },
    hr: Divider,
    img: Image,
    li: ListItemWithText,
    p: Paragraph,
    table: Table,
    td: TableCell,
    tr: TableRow,
    ul: List
  };
};

exports.AnswerWithText = AnswerWithText;
exports.Article = Article;
exports.BackToTopButton = BackToTopButton;
exports.BackToTopLink = BackToTopLink;
exports.BackgroundVideo = BackgroundVideo;
exports.BirthdayInput = BirthdayInput;
exports.Blockquote = Blockquote;
exports.Canvas = Canvas;
exports.CarPlateField = CarPlateField;
exports.CityField = CityField;
exports.DateField = DateField;
exports.EmailField = EmailField;
exports.EmbedGoogleMap = EmbedGoogleMap;
exports.Fieldset = Fieldset;
exports.Figure = Figure;
exports.FigureCaption = FigureCaption;
exports.FileInput = FileInput;
exports.Footer = Footer;
exports.Form = Form;
exports.GatsbyLink = GatsbyLink;
exports.GatsbyLinkButton = GatsbyLinkButton;
exports.H1 = H1;
exports.H2 = H2;
exports.H3 = H3;
exports.H4 = H4;
exports.H5 = H5;
exports.H6 = H6;
exports.Header = Header;
exports.Heading = Heading;
exports.HorizontalList = HorizontalList;
exports.Iframe = Iframe;
exports.Image = Image;
exports.Legend = Legend;
exports.ListItemWithText = ListItemWithText;
exports.MainContent = MainContent;
exports.NameField = NameField;
exports.Nav = Nav;
exports.NetlifyForm = NetlifyForm;
exports.PageFooter = PageFooter;
exports.PageHeader = PageHeader;
exports.Paragraph = Paragraph;
exports.PhotoUploadField = PhotoUploadField;
exports.Question = Question;
exports.QuestionText = QuestionText;
exports.SiteNav = SiteNav;
exports.SiteTitle = SiteTitle;
exports.SkipToContentLink = SkipToContentLink;
exports.TelephoneNumberField = TelephoneNumberField;
exports.Video = Video;
exports.getNativeFontFamily = getNativeFontFamily;
exports.getTheme = getTheme;
exports.getThemeOptions = getThemeOptions;
exports.useMDXComponents = useMDXComponents;
